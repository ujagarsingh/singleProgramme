<?php
class AccountManager{ 
 
    // database connection and table name
    private $conn;
    
    // object properties
    public $id;
	 
    public $school = Array();
    public $accGroup = Array();
    public $accLedgerEntry = Array();
    public $accLedger = Array();
    public $students = Array();
    public $professionals = Array();
    
    // constructor with $db as database connection
    public function __construct($db){
        $this->conn = $db;
    }
    
    // COMMON ARRAY_FILTER FUNCTION

function getAccountManager($obj) {
        $ldr_data = $this->getGroupWiseDetailBalanceSheet($obj);
        $compoundLedgers = $this->mergeAllLedgers($obj);
        $all_LWB = $this->getFinalBalanceofLedgers($ldr_data, $compoundLedgers);

        $acc_group = $obj['acc_group'];
        // $_ledger = $obj.acc_ledgers;
        // $all_LWB = ldr_with_balance;
        // $all_ledger = compoundLedgers;
        // $_school_id = $obj.filteredSchoolData.slct_school_id;

        
        // $main_group = Arrry_filter((mg_item) => {
        //     if (mg_item.under_gp_id === null) {
        //         return mg_item;
        //     };
        // });

        $main_group = array_filter($acc_group, function($item){
                if($item['under_gp_id'] === null){
                    return true;
                }
            });
        
        // echo"<pre>";print_r($main_group);echo"</pre>";die();    

        function getSubLedgersHander($all_ledger, $s_item) {

            // $sub_ledgers = all_ledger.filter((item) => {
            //     if (item.under_group == s_item.id) {
            //         return item;
            //     }
            // });

            $sub_ledgers = array_filter($all_ledger, function($item){
                    if($item['under_group'] ===  $s_item['id']){
                        return true;
                    };
                });
            
            $cr_amo = 0;
            $dr_amo = 0;
            // $updated_ledgers = sub_ledgers.map((l_item) => {
            //     if (l_item.blnc_type === "CR") {
            //         cr_amo += Number(l_item.cl_blnc);
            //     } else {
            //         dr_amo += Number(l_item.cl_blnc);
            //     };
            //     return l_item;
            // });

            $updated_ledgers = array();
            foreach($sub_ledgers as $key => $value) {
                if ($key['blnc_type'] === "CR") {
                    $cr_amo += Number($l_item['cl_blnc']);
                } else {
                    $dr_amo += Number($l_item['cl_blnc']);
                };
                $updated_ledgers[$key] = $value;
            };

            $update_s_item = array(
                "sub_ledgers" => $updated_ledgers,
                "type" => "S_GRP",
                "cl_blnc" => Math.abs($cr_amo - $dr_amo),
                "blnc_type" => ($cr_amo <= $dr_amo) ? "DR" : "CR"
            );

            return $update_s_item;
        };

        function getSubGroupsHandler($_group, $m_item) {
            $sub_group_with_ledgers = [];
            // $sub_groups = _group.filter((item) => {
            //     if (item.under_gp_id == m_item.id) {
            //         return item;
            //     }
            // })

            $sub_groups = array_filter($all_ledger, function($item){
                    if($item['under_gp_id'] ===  $s_item['id']){
                        return true;
                    }
                });

            $cr_amo = 0;
            $dr_amo = 0;

            if ($sub_groups.length > 0) {
                // $sub_group_with_ledgers = $sub_groups.map(($s_item) => {
                //     $sub_ledgers = getSubLedgersHander($all_LWB, $s_item);

                //     if ($sub_ledgers['blnc_type'] === "CR") {
                //         $cr_amo += Number($sub_ledgers['cl_blnc']);
                //     } else {
                //         $dr_amo += Number($sub_ledgers['cl_blnc']);
                //     }
                //     $s_item = { ...$s_item, ...$sub_ledgers };
                //     return $s_item;
                // });

                $sub_group_with_ledgers = array();
                foreach($sub_groups as $s_item) {
                    $sub_ledgers = getSubLedgersHander($all_LWB, $s_item);
                    if ($sub_ledgers['blnc_type'] === "CR") {
                        $cr_amo += Number($sub_ledgers['cl_blnc']);
                    } else {
                        $dr_amo += Number($sub_ledgers['cl_blnc']);
                    }
                    $s_item = array_merge( $s_item, $sub_ledgers );
                    return $s_item;
                }
                

            } else {
                $sub_ledgers = getSubLedgersHander($all_LWB, $m_item);

                if ($sub_ledgers['blnc_type'] === "CR") {
                    $cr_amo += Number($sub_ledgers['cl_blnc']);
                } else {
                    $dr_amo += Number($sub_ledgers['cl_blnc']);
                };

                $sub_group_with_ledgers = $sub_ledgers['sub_ledgers'];
            };

            $update_g_item = array(
                "sub_group" => $sub_group_with_ledgers,
                "type" => "P_GRP",
                "cl_blnc" => Math.abs($cr_amo - $dr_amo),
                "blnc_type" => ($cr_amo <= $dr_amo) ? "DR" : "CR"
            );

            return $update_g_item;
        };

        function p_and_l_accountHandler($all_groups) {
            $$l_cr_amo = 0;
            $$l_dr_amo = 0;
            // $left_side = all_groups.filter((l_item) => {
            //     if (l_item.id == "1") {
            //         if (l_item.blnc_type === "CR") {
            //             l_cr_amo += Number(l_item.cl_blnc)
            //         } else {
            //             l_dr_amo += Number(l_item.cl_blnc)
            //         }
            //         return l_item
            //     }
            // });
            $left_side = array_filter($all_groups, function($item){
                    if ($item['id'] == "1") {
                        if ($item['blnc_type'] === "CR") {
                            $l_cr_amo += Number($item['cl_blnc']);
                        } else {
                            $l_dr_amo += Number($item['cl_blnc']);
                        };
                        return true;
                    };
                });

            $left_obj = array(
                "cl_blnc" => Math.abs(l_cr_amo - l_dr_amo),
                "blnc_type" => (l_cr_amo <= l_dr_amo) ? "DR" : "CR",
            );

            $$r_cr_amo = 0;
            $$r_dr_amo = 0;

            // $right_side = all_groups.filter((l_item) => {
            //     if (l_item.id == "2") {
            //         if (l_item.blnc_type === "CR") {
            //             r_cr_amo += Number(l_item.cl_blnc)
            //         } else {
            //             r_dr_amo += Number(l_item.cl_blnc)
            //         }
            //         return l_item
            //     }
            // });

            $right_side = array_filter($all_groups, function($item){
                    if ($item['id'] == "2") {
                        if ($item['blnc_type'] === "CR") {
                            $r_cr_amo += Number($item['cl_blnc']);
                        } else {
                            $r_dr_amo += Number($item['cl_blnc']);
                        };
                        return true;
                    };
                });

            $right_obj = array(
                "cl_blnc" => Math.abs($r_cr_amo - $r_dr_amo),
                "blnc_type" => ($r_cr_amo <= $r_dr_amo) ? "DR" : "CR",
            );

            $total_blnc = Math.abs(($left_obj['cl_blnc'] > $right_obj['cl_blnc']) ? $left_obj['cl_blnc'] : $right_obj['cl_blnc']);
            $cl_blnc = Math.abs($left_obj['cl_blnc'] - $right_obj['cl_blnc']);
            $blnc_type = ($left_obj['cl_blnc'] <= $right_obj['cl_blnc']) ? "DR" : "CR";

            // sub_group impove when working on profit and loss account
            $p_and_l = array(
                "id" => "1001",
                "under_gp_id" => null, // null
                "group_name" => "Profit and Loss",
                "Alias" => null,
                "group_type" => "S",
                "total_blnc" => $total_blnc,
                "cl_blnc" => $cl_blnc,
                "blnc_type" => $blnc_type,
                "sub_group" => array_merge($left_side, $right_side),
            );
            return p_and_l;
        }

        // $groups_with_sub_groups = main_group.map((m_item) => {
        //     $sub_groups = getSubGroupsHandler(_group, m_item);
        //     $m_item = { ...m_item, ...sub_groups }
        //     return m_item;
        // });

        $groups_with_sub_groups = array();
        foreach($sub_groups as $m_item) {
            $sub_groups = getSubGroupsHandler($_group, $m_item);
            $m_item = array_merge($m_item, $sub_groups );
            return $m_item;
        }

        $_p_and_l = p_and_l_accountHandler($groups_with_sub_groups);
        $groups_with_sub_groups.push($_p_and_l);

        $result = array( 
            "data" => array( 
                $acc_manager => array( 
                    "group_balance" => $groups_with_sub_groups, 
                    "ledger_data" => $ldr_data, 
                    "all_ledgers" => $compoundLedgers )
                    )
                );

        return $result;
}

// $balance_res = accManager(final_balance, $obj);
// // allGrp => All Groups, ldr_data => all ledger data
// console.log({ "Gropu, Sub Group, ledger with Balance": balance_res });
// // console.log(JSON.stringify(balance_res));



function getGroupWiseDetailBalanceSheet($obj) {
    // debugger;
    // echo"<pre>";print_r($obj);echo"</pre>";die();
    $res_data = $obj['acc_entries'];
    $res_students = $obj['students'];
    $res_profs = $obj['professional'];
    $detaild_ldr = [];
    
    // $res_data.map(($ldrs) => {
    foreach($res_data as $ldrs) {
        // $_newLdr = $ldrs.ledgers.map((kItem) => {
            $_newLdr = array();
            foreach($ldrs['ledgers'] as $kItem) {
            // echo"<pre>";print_r($kItem['ldr_ref_id']);echo"</pre>";die();
            //$lr_ref = $kItem['ldr_ref_id'].split("_");
            $lr_ref =  explode("_", $kItem['ldr_ref_id']);
            
            // echo"<pre>";print_r($lr_ref[1]);echo"</pre>";die();
            switch ($lr_ref[1]) {
                case 'STU':
                    // Students
                    // $ldr_info = res_students.filter((sItem) => {
                    //     if (lr_ref[0] === sItem.se_id && lr_ref[2] === sItem.school_id) {
                    //         return sItem;
                    //     }
                    // })
                    $ldr_info = array_filter($res_students, function($item) use ($lr_ref){
                        if($lr_ref[0] === $item['se_id'] && $lr_ref[2] === $item['school_id']){
                            return true;
                        };
                    });

                    echo"<pre>";print_r($ldr_info);echo"</pre>";die();
                    $abc = array("ldr_name" => $ldr_info['student_name']  );
                    echo"<pre>";print_r($abc);echo"</pre>";die();
                    $kItem = array_merge( $kItem, array("ldr_name" => $ldr_info[0]['student_name'] + ' S/o ' + $ldr_info[0]['father_name'] + ' [' + $ldr_info[0]['admission_number'] + '/' + $ldr_info[0]['stu_class'] + ']' ));
                    break;
                case 'STF':
                    // Staff
                    // $ldr_p_info = res_profs.filter((sItem) => {
                    //     if (lr_ref[0] === sItem.s_id && lr_ref[2] === sItem.school_id) {
                    //         return sItem;
                    //     }
                    // })
                    $ldr_p_info = array_filter($res_profs, function($item)  use ($lr_ref){
                        if($lr_ref[0] === $item['s_id'] && $lr_ref[2] === $item['school_id']){
                            return true;
                        };
                    });

                    $kItem = array_merge( $kItem, array("ldr_name" => $ldr_p_info[0]['emp_name'] + ' S/o ' + $ldr_p_info[0]['emp_f_name'] ));

                    break;
                default:
                    // Other Ledgers
                    // $ldr_info1 = res_students.filter((sItem) => {
                    //     if (lr_ref[0] === sItem.se_id && lr_ref[2] === sItem.school_id) {
                    //         return sItem;
                    //     }
                    // })
                     $ldr_info1 = array_filter($res_students, function($item)  use ($lr_ref){
                        if($lr_ref[0] === $item['se_id'] && $lr_ref[2] === $item['school_id']){
                            return true;
                        };
                    });

                    $kItem = array_merge( $kItem, array("ldr_name" => $ldr_info1[0]['ledger_name'] ));
            }
            return $kItem;
        };
        $detaild_ldr = array_merge($detaild_ldr, $_newLdr);
        // return _newLdr
    };

    return $detaild_ldr;
}
// $ldr_data = getGroupWiseDetailBalanceSheet($obj);
// allGrp => All Groups, ldr_data => all ledger data
// all voucher entries.....
// console.log({ "All Voucher Entries": ldr_data });


// get merge all ledges (normal + students + staff + other);
function mergeAllLedgers($obj) {
    $merged_ledger = [];
    $_ledger = $obj['acc_ledgers'];
    $_students = $obj['students'];
    $_professionals = $obj['professional'];
    $_updated_ledger = array();
    foreach($_ledger as $l_item) {
        $l_item = array_merge( $l_item, array("type"=> "LDR", "ldr_ref_id"=> $l_item['id'] + "_LDR_" + $l_item['school_id'] ));
        return $l_item;
    };
    $_stu_data = array();
    foreach($_students as $s_item) {
        $ldr_name = $s_item['student_name'] + ' S/o ' + $s_item['father_name'] + ' [' + $s_item['admission_number'] + '/' + $s_item['stu_class'] + ']';
        $_single_stu = array(
            "id" => $s_item['se_id'],
            "school_id" => $s_item['school_id'],
            "under_group" => 10,
            "group_type" => "P",
            "ledger_name" => $ldr_name,
            "Alias" => null,
            "ledger_type" => "P",
            "server_date_time" => null,
            "type" => "STU",
            "ldr_ref_id" => $s_item['se_id'] + "_STU_" + $s_item['school_id']
        );
        return $_single_stu;
    };

    $_stf_data = array();
    foreach($_professionals as $s_item){
        $ldr_name = $s_item['emp_name'] + ' S/o ' + $s_item['emp_f_name'];
        $_single_stu = array(
            "id" => $s_item['se_id'],
            "school_id" => $s_item['school_id'],
            "under_group" => 11,
            "group_type" => "P",
            "ledger_name" => $ldr_name,
            "Alias" => null,
            "ledger_type" => "P",
            "server_date_time" => null,
            "type" => "STF",
            "ldr_ref_id" => $s_item['s_id'] + "_STF_" + $s_item['school_id']
        );
        return $_single_stu;
    };

    // console.log(merged_ledger);
    return $merged_ledger = array_merge($_updated_ledger, $_stu_data, $_stf_data);
}
// $compoundLedgers = mergeAllLedgers(ldr_data, $obj);
// // $obj => $obj, ldr_data => all ledger data
// console.log({ "All Ledgers": compoundLedgers });

function getFinalBalanceofLedgers($data, $ledgers) {

    $updated_ledger = array();
    foreach($ledgers as $l_item) {
        $_related_data = array();
        foreach($data as $d_item){
            if ($l_item['ldr_ref_id'] === $d_item['ldr_ref_id']) {
                return $d_item;
            }
        };
        $cr_amo = 0;
        $dr_amo = 0;

        foreach($_related_data as $vItem) {
            if ($vItem['tr_type'] === "CR") {
                $cr_amo += Number($vItem['tr_amount']);
            } else {
                $dr_amo += Number($vItem['tr_amount']);
            }
        };

        return $l_item = array_merge( $l_item, array("cl_blnc" => Math.abs($cr_amo - $dr_amo), "blnc_type" => ($cr_amo <= $dr_amo) ? "DR" : "CR" ));
    };
    return $updated_ledger;
}
// $final_balance = getFinalBalanceofLedgers(ldr_data, compoundLedgers);
// // ldr_data => all voucher entrys data
// // compoundLedgers => All ledgers (students, fee, staff, and other), 
// console.log({ "Ledger wise Balance": final_balance });


// Balance sheet (current Libilities and Assets)
// get every group wise balance and p&L a/c
// function balanceSheetHandler(ldr_with_balance, $obj) {}




}
